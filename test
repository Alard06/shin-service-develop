def get_images_drom(tires_element, company, uniq_data_id):
    # Initialize logging
    logger = logging.getLogger(__name__)

    # Attempt to find the image in the Tire, Disk, TruckTire, MotoTire, and SpecialTire models
    tire_id = tires_element.get('id')
    models = {
        'Tire': Tire.objects.filter(id_tire=tire_id).first(),
        'Disk': Disk.objects.filter(id_disk=tire_id).first(),
        'TruckTire': TruckTire.objects.filter(id_truck=tire_id).first(),
        'MotoTire': MotoTire.objects.filter(id_moto=tire_id).first(),
        'SpecialTire': SpecialTire.objects.filter(id_special=tire_id).first()
    }

    # Prefetch related company images to reduce queries
    company_models = {
        Tire: TireCompany,
        Disk: DiskCompany,
        TruckTire: TruckTireCompany,
        MotoTire: MotoTireCompany,
        SpecialTire: SpecialTireCompany
    }

    for model_name, model in models.items():
        if model is not None:
            company_model = company_models.get(model.__class__)
            if company_model is None:
                logger.error(f"No company model found for {model.__class__}")
                continue  # Skip to the next model

            filter_kwargs = {f"{model_name.lower()}": model, "company": company}
            company_image = company_model.objects.filter(**filter_kwargs).first()

            if company_image is not None and company.get_other_photo_drom:
                if company_image.additional_images:
                    return company_image.additional_images
                else:
                    return ' '

            return model.image

    # If no image is found, log the missing element
    logger.warning(f"No image found for element ID: {tires_element.get('brand')} {tires_element.get('product')}")
    element = tires_element
    # Call the async function to add the unique product
    add_unique_product_no_photo(uniq_data_id, element)

    return ' '  # Return empty string if no image found